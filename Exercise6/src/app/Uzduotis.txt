Create class CargoBox.
    The class has three private class variables: itemName, itemQuantity, and weightPerItem.
    The class has method setValues that gets three values to set all dynamic class variables.
    The class has get methods for all class variables.
    The class has method getWeight that returns the total weight of the cargo box.
    The class has public method toString that returns a String with all cargo box information.
Create class Boat.
    The class has five private class variables: boatName, maxWeight, noOfBoxes, totalWeight, and array boxes of CargoBox objects. Class variables boatName and maxWeight are not initialized during the declaration. Variables noOfBoxes and totalWeight are initialized with value 0. Array boxes is initialized with 10 positions.
    The class has method setValues that gets parameters to set the name of the boat and the maximum weight of the boat.
    The class has get methods for class variables noOfBoxes, boatName, maxWeight, and totalWeight.
    The class has method addCargoBox that gets a CargoBox object and returns a boolean value. If the box is loaded to the boat successfully the result is true. The boat can not exceed the maximum weight and the number of boxes. The method also increases values of class variables noOfBoxes and totalWeight of the boat if the box is loaded to the boat.
    The class has method printCargoBoxes. The method does not get and return anything. It prints information about all boxes of the boat (method toString could be used without its invocation).
    The class has public method toString that returns the String with a boat name, total weight, and the maximum weight of the boat.
Create class Shipment.
    The class has class variable boats that is an array of Boat objects and it is not initialized during the declaration.
    The class has method makeBoats. The method does not return anything. The method gets two parameters: the number of boats and a String with boat information (Name1 MaxWeigth1 Name2 MaxWeight2 ...). The method initializes class variable boats, creates all boats, and sets their names and maximum weights. Default constructor and method setValues are used in the method.
    The class has method printBoats. The method does not get and return anything. The method prints information about each boat (boat information and its cargo box information) of the shipment.
    The class has method fillBoats. The method gets a String with all the information about all boats' cargo boxes. The letters CB identify the start of the next boat filling. The format between after CB is: itemName1 numberOfBoxes1 numberOfItemsInACargoBox1 weightOfOneItem1 itemName2 ... The method addCargoBox must be invoked. If the box cannot be loaded the message must be printed. The message about each filled boat must be printed too. E.g. if String "CB Milk 5 1 25.5 Milk 1 2 30.2 Wheet 2 3 20 CB Oil 11 5 20 CB Wood 1 1 250" is received: three times CB means that three boats are filled. "Milk 5 1 25.5" means that each of five boxes will contain one item of Milk and weight of the item is 25.5. So the first boat will have 5+1+2 = 8 cargo boxes.
    The class has static method howManyFullyFilled that gets a Shipment object and returns a number of fully filled boats in this shipment.
    The class has method main. The main method has a String initialized with value "BO:3 Lietuva 350 Vytautas 1000 Kastytis 500 CB Milk 5 1 25.5 Milk 1 2 30.2 Wheet 2 3 20 CB Oil 11 5 20 CB Wood 1 1 250". This String is analyzed and new shipment is constructed. Methods makeBoats, fillBoats, printBoats, and howManyFullyFilled must be invoked.
